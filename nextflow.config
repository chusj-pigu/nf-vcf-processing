profiles {
    standard {
        docker {
            enabled=true
            autoMounts=true
        }
        params {
            in_dir = null
            info = "${projectDir}/assets/info.csv"
            format = "${projectDir}/assets/format.csv"
            bedgenes_list = "${projectDir}/assets/gene_list_2025"
            cancer_genes = "${projectDir}/assets/cancer_genes"
            out_dir = params.in_dir
            help = false
            publish_mode = 'copy'
        }
    }
    drac {
        apptainer {
            enabled=true
            autoMounts=true
            libraryDir = "/project/ctb-noncodo/Platform/references/apptainer/images"
            cacheDir = "/project/ctb-noncodo/Platform/references/apptainer/cache"
        }
        params {
            in_dir = null
            info = "${projectDir}/assets/info.csv"
            format = "${projectDir}/assets/format.csv"
            bedgenes_list = "${projectDir}/assets/gene_list_2025"
            cancer_genes = "${projectDir}/assets/cancer_genes"
            out_dir = params.in_dir
            help = false
            publish_mode = 'link'
            max_memory='249G'
            max_cpus=64
            max_time='168h'
        }
        process {
            withName:gatk_table {
                executor = 'slurm'
                clusterOptions = "--cpus-per-task=4 --mem 10G --time=1:00:00"
                array = 5
            }
            withLabel:rscript {
                executor = 'slurm'
                array = 5
                time = { check_max( 1.h * task.attempt, 'time' ) }
                memory = { check_max( 30.GB * task.attempt, 'memory' ) }
                cpus = { check_max( 2 * task.attempt, 'cpus' ) }
                errorStrategy = { task.attempt <= 3 ? 'retry' : 'terminate' }
            }
        }
    }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}